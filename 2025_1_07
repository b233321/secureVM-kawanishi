AMD64 Architecture Programmer's Manual Volume 2:System Programming
15.34 Secure Encrypted Virtualization
SEVの仕組み

暗号化された仮想マシンを使う仕組み

暗号鍵はAMD-SPで管理
CPUソフトウェアは鍵の値を認識しない。ハイパバイザはAMD-SPドライバを介して仮想マシンの鍵の割り当てをASIDで調整
↑
鍵はCPUソフトウェアから見えずチップ外に平文で保存もされない。

暗号化できるメモリを選択可能
↑
選択できるのはロングモードとレガシーRAEモードのみ。それ以外は全て暗号化
↑
モード?

暗号化動作
ゲストページテーブルでメモリページのCbit決定←暗号化ステータス決定
↓
プライベート、パブリックページの判断可能←データページでのみ使用可能
命令フェッチ、ゲストページテーブルウォークの代行によるメモリアクセスはCbit関係無し
↓
常にプライベート
↓
本人以外コードやデータ挿入できない
ゲストが命令ページ、ページテーブル内のデータをゲスト外部からアクセス可能にするにはデータを共有データページに明示的にコピー
ゲストは命令ページとページテーブルアドレスでCbitを明示的に設定可能
↓
ハードウェアが常にプライベートアクセスとして実行するなら特に気にしなくていい

15.34.6 ページテーブルのサポート?
Cbitがアドレスビットの場合
↓
Cbitがネストされた(nested?)ページテーブルを介して変換されるとき
↓
ゲスト物理アドレスからマスクされる
↓
ゲストがプライベートとしてマークするために選択したページは、ハイパバイザが認識する必要無し?

15.34.7
一部のハードウェア実装で、暗号化の有効化、鍵の異なる同物理ページのマッピング間で一貫性が適用されないことがある
↓
この場合特定のメモリページの暗号化の有効化、鍵を変更するとき
↓
ソフトウェアは、最初にページが全てのCPUキャッシュからページがフラッシュされるようにする
↓
15.34.9ゲストが実行した全てのコアに対してWBINVD命令、もしくはVMPAGE_FLUSH MSRを使用
↓
VMPAGE_FLUSH MSRはゲストの代わりに4KBのデータをフラッシュする(ゲストにプライベートとマークされたメモリのみ)ための書き込み専用レジスタ
↓
ハイパバイザはメモリページがプライベートとしてマークされているか分からない
↓
キャッシュからページを削除するときCLFFUSHも実行する必要がある
物理アドレスにマップされていないホスト仮想アドレスをフラッシュしようとしたり、ASID=0をしたりする
↓
#GP(0)フォルト発生
SMAP使用可能ならば入力アドレスはsupervisorアドレスとしてページテーブルにマップ
ハイパバイザはページのホストリニアアドレスとゲストASIDをMSRに書き込む
ハードウェアはページのライトバック無効化を実行→任意のデータに存在するダーティデータを引き起こす
つまり特定のハードウェアでは不具合があるためページをフラッシュして解決する?

15.34.8
sevとsmeは合わせられる
↓
ゲストページテーブルがゲストメモリの暗号化を制御→ゲストにより共有されていていればsmeで暗号化
ホスト(ネストされた)ページテーブルが共有メモリを暗号化

15.34.10
SEV_STATUS MSRの
ゲストはSEV_STATUS MSR(C001_0131)を読み取ることで現在アクティブなSEV機能を確認可能
ゲストの最後のVMRUNで有効にされたSEV機能を示す
SEV_STATUS MSRは読み取り専用→ハイパバイザがSEV_STATUS MSRへのアクセスをインターセプトできない

15.34.11
仮想透過暗号化(Virtual Transparent Encryption)
VTE機能を有効にするとSEVゲスト内のすべてのメモリアクセスをゲストのキーで暗号化
↑
ハイパバイザでVMCBオフセット90hビット5(bit1(Sev)=1,bit2(sev-es)=0)を設定
